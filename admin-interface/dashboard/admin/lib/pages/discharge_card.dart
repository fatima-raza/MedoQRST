import 'dart:io';
import 'package:admin/services/users_services.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'pdf_generator.dart';
import 'package:open_filex/open_filex.dart';
import 'recentPdfs.dart';
import "patientDetailsCard.dart";
import 'package:file_picker/file_picker.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../helper/downloadLocation.dart';
import 'package:admin/pages/dischargeWidget.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:flutter/services.dart' show rootBundle;
import './historyFile/history_file.dart'; // Update with correct path to UploadToCloud
import '../utils/date_time_utils.dart';
import 'package:intl/intl.dart';

class DischargeCard extends StatefulWidget {
  const DischargeCard({super.key});

  @override
  _DischargeCardState createState() => _DischargeCardState();
}

class _DischargeCardState extends State<DischargeCard> {
  TextEditingController admissionIdController = TextEditingController();
  bool isLoading = false;
  Map<String, dynamic>? userData;
  Map<String, dynamic>? patientDetails = {};
  List<File> recentPdfs = [];
  bool hasSearched = false;
  bool patientFound = false;
  String? noPatientFoundMessage; // Declare it as a class variable
  String? errorMessage;
  final FocusNode IDFocusNode = FocusNode();
  String? dischargeCardsDirectoryPath;
  bool isAdmissionIdInvalid = false;
  bool isViewingPatientDetails = false;
  bool isCompleteSummary = false;
  Map<String, dynamic> dischargeData = {};
  Map<String, dynamic>? data; // final packed data
  String? selectedDisposalStatus;
  String admissionId = '';
  bool isBedOccupied = true;
  bool isUploaded = false;
  bool isDischarge = false;

  static final sectionHeaderStyle = pw.TextStyle(
    fontSize: 16,
    fontWeight: pw.FontWeight.bold,
    color: PdfColor.fromHex('000000'),
  );

  @override
  void initState() {
    super.initState();
    initializeFolderPath();
  }

  @override
  void dispose() {
    // clean up things here
    super.dispose();
  }

// Function to fetch the correct directory at the start
  Future<void> initializeFolderPath() async {
    String? path = await getMedoSubFolderPath('Discharge Summary');
    setState(() {
      dischargeCardsDirectoryPath = path;
    });
    print('✅ Discharge Cards Path: $dischargeCardsDirectoryPath');
  }

    String formatTimeFromString(String time) {
    try {
      print('Received time: $time');

      // Parse as ISO string directly
      final parsedTime = DateTime.parse(time);

      // Format only time part
      return DateFormat('hh:mm a').format(parsedTime); // or 'HH:mm' for 24-hour
    } catch (e) {
      print('Error parsing time: $time | Error: $e');
      return 'Invalid Time';
    }
  }

  void showError(String message) {
    setState(() {
      errorMessage = message;
      isAdmissionIdInvalid = true;
      isLoading = false;
    });
  }

  pw.Widget buildPageNumber(pw.Context context, {pw.Font? font}) {
    return pw.Row(
      mainAxisAlignment: pw.MainAxisAlignment.end,
      children: [
        pw.Text(
          'Page ${context.pageNumber}',
          style: pw.TextStyle(
            fontSize: 12,
            fontWeight: pw.FontWeight.bold,
            font: font,
          ),
        ),
      ],
    );
  }

  pw.Widget buildMainHeading(String title, {pw.Font? font}) {
    return pw.Center(
      child: pw.Padding(
        padding: const pw.EdgeInsets.only(top: 20),
        child: pw.Text(
          title,
          style: pw.TextStyle(
              font: font, fontSize: 16, fontWeight: pw.FontWeight.bold),
        ),
      ),
    );
  }

  /// Footer widget
  pw.Widget footer = pw.Positioned(
    bottom: 0,
    left: 0,
    right: 0,
   child:  pw.Container(
  height: 50,
  color: PdfColors.blueGrey200, // Using predefined blueGrey400
  child: pw.Center(
    child: pw.Text(
      'Document Generated By MedoQRST | ${formatDate(DateTime.now())}', // Formatted current date
      style: pw.TextStyle(
        fontSize: 12,
        fontStyle: pw.FontStyle.italic,
        color: PdfColors.black, // Black text color
     
      ),
    ),
  ),
),
 
  );

  Future<void> _handleDischarge() async {
    try {
      // Store the current admission number before proceeding
      final currentAdmissionNo = admissionIdController.text;

      // Validate required data
      if (patientDetails == null) {
        throw Exception('Patient details not available');
      }

      setState(() => isLoading = true);

      // 1. Update bed status
      final bedUpdateSuccess = await UsersServices.updateBedOccupiedStatus(
        bedNo: patientDetails!['Bed_no'].toString(),
        wardNo: patientDetails!['Ward_no'].toString(),
        isOccupied: 0, // Mark as unoccupied
      );

      if (!bedUpdateSuccess) {
        throw Exception('Failed to update bed status');
      }

      setState(() {
        isLoading = false;
        isDischarge = true;
      });


      await showDialog(
  context: context,
  barrierDismissible: false, // Prevent closing by tapping outside
  builder: (context) => Dialog(
    insetPadding: EdgeInsets.all(20),
    child: ConstrainedBox(
      constraints: BoxConstraints(
        maxWidth: MediaQuery.of(context).size.width * 0.9,
        maxHeight: MediaQuery.of(context).size.height * 0.9,
      ),
      child: UploadToCloud(
      admissionNo: currentAdmissionNo,
       onUploadComplete: () {
    Navigator.of(context).pop(); // Close the dialog
  },
    ),
    ),
  ),
);


      // After dialog is closed, refresh with the same admission number
      if (mounted) {
        // Reset the admission controller to trigger validation
        admissionIdController.text = currentAdmissionNo;
        // Call your validation and fetch method
        validateAndFetchPatientData();
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: DefaultTextStyle(
            style: const TextStyle(color: Colors.black), // Force black text
            child: const Text('Patient discharged successfully.'),
          ),
          backgroundColor: Colors.blueGrey.shade200,
          duration: const Duration(seconds: 2),
        ),
      );
    } catch (e) {
      if (mounted) {
        setState(() => isLoading = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Discharge failed: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }


 

  Future<void> fetchPatientData() async {
    admissionId = admissionIdController.text.trim();

    // Check for empty or syntactically invalid ID
    if (admissionId.isEmpty) {
      setState(() {
        isAdmissionIdInvalid = true;
        errorMessage = "Admission ID cannot be empty";
        hasSearched = true;
        isLoading = false;
      });
      return;
    }

    setState(() {
      isLoading = true;
      isAdmissionIdInvalid = false; // reset before API call
      hasSearched = true;
    });

    try {
      final userResponse = await UsersServices.getPatientDetails(admissionId);
      final registrationResponse =
          await UsersServices.getRegistrationDetails(admissionId);
      final dischargeResponse =
          await UsersServices.getDischargeDetails(admissionId);

      if (userResponse != null && registrationResponse != null) {
        setState(() {
          userData = userResponse;
          patientDetails = registrationResponse;
          dischargeData = dischargeResponse ?? {};
          isCompleteSummary = dischargeResponse != null;
          patientFound = true;
          isAdmissionIdInvalid = false;
          errorMessage = null;
          isViewingPatientDetails = true;
          final uploadedToCloud = userData?['Uploaded_to_cloud'];
          isUploaded = uploadedToCloud == true;
        });
        // print('Cloud Status: ${isUploaded}');
         // Print dischargeData after state is updated
         print('SADIA YE Discharge Data HAI: $dischargeData');

        Map<String, dynamic> selectedRegistrationFields = {
          'Admission_no': patientDetails!['Admission_no'],
          'Admission_date': patientDetails!['Admission_date'],
          'Admission_time': patientDetails!['Admission_time'],
          'Receiving_note': patientDetails!['Receiving_note'],
          'Primary_diagnosis': patientDetails!['Primary_diagnosis'],
          'Associate_diagnosis': patientDetails!['Associate_diagnosis'],
          'Ward_no': patientDetails!['Ward_no'],
          'Bed_no': patientDetails!['Bed_no'],
          'doctor': patientDetails!['DoctorName'],
          'Disposal_status': patientDetails!['Disposal_status']
        };

        data = {
          "registration": selectedRegistrationFields,
          "discharge": dischargeData,
          "userData": userData,
        };

        print("Packed Data: $data");
      } else {
        setState(() {
          userData = null;
          patientDetails = null;
          patientFound = false;
          isAdmissionIdInvalid = false; // ✅ it's not invalid, just not found
          errorMessage = null; // if you want to show in body only
          isViewingPatientDetails = true;
          isCompleteSummary = false;
        });
      }
    } catch (e) {
      setState(() {
        userData = null;
        patientDetails = null;
        patientFound = false;
        isAdmissionIdInvalid = false; // ✅ Still a valid format, even if error
        errorMessage = "An error occurred while fetching data.";
        isViewingPatientDetails = true;
      });
    }

    setState(() => isLoading = false);
  }

  void validateAndFetchPatientData() {
    setState(() {
      userData = null;
      patientDetails = null;
      noPatientFoundMessage = null; // Reset previous error messages
      patientFound = false; // Reset patient found status
      isCompleteSummary = false;
    });
    String admissionId = admissionIdController.text.trim();

    if (admissionId.isEmpty) {
      setState(() {
        isAdmissionIdInvalid = true;
        hasSearched = false;
      });
      showError("*admission No is Required!");
      return;
    }

    if (!RegExp(r'^\d{6}$').hasMatch(admissionId)) {
      setState(() {
        isAdmissionIdInvalid = true;
        hasSearched = false;
      });
      showError("Invalid Admission No!");
      return;
    }

    // If valid input, clear errors and fetch data
    setState(() {
      isAdmissionIdInvalid = false;
      errorMessage = null;
      isLoading = true;
      patientFound = false;
      hasSearched = true;
      isViewingPatientDetails = true;
    });

    fetchPatientData();
  }

  void _generatePdf() async {
    String bedNo = patientDetails!['Bed_no'].toString();
    String wardNo = patientDetails!['Ward_no'].toString();
    String Age = userData!['Age'].toString();
    final notoFont =
        pw.Font.ttf(await rootBundle.load('assets/fonts/NotoSans-Regular.ttf'));

     // Initialize discharge details with default values
    String dischargeDate = 'Not available';
    String dischargeTime = 'Not available';
    String surgeryDetails = 'Not applicable';
    String operativeFindings = 'Not available';
    String examinationFindings = 'Not available';
    String dischargeTreatment = 'Not available';
    String followUp = 'Not available';
    String instructions = 'Not available';
    String conditionAtDischarge = 'Not available';
    String ctScan = 'Not available';
    String mri = 'Not available';
    String biopsyReport = 'Not available';
    String otherFindings = 'Not available';
    final doctor = patientDetails!['DoctorName'];

    // Extract discharge details if available
    if (dischargeData != null && dischargeData['data'] != null) {
      try {
        final dischargeDetails = List<Map<String, dynamic>>.from(dischargeData['data']);
        if (dischargeDetails.isNotEmpty) {
          final firstDischarge = dischargeDetails.first;
          
      
          
          // Extract other fields
          surgeryDetails = firstDischarge['Surgery'] ?? 'Not applicable';
          operativeFindings = firstDischarge['Operative_findings'] ?? 'Not available';
          examinationFindings = firstDischarge['Examination_findings'] ?? 'Not available';
          dischargeTreatment = firstDischarge['Discharge_treatment'] ?? 'Not available';
          followUp = firstDischarge['Follow_up'] ?? 'Not available';
          instructions = firstDischarge['Instructions'] ?? 'Not available';
          conditionAtDischarge = firstDischarge['Condition_at_discharge'] ?? 'Not available';
          ctScan = firstDischarge['CT_scan'] ?? 'Not available';
          mri = firstDischarge['MRI'] ?? 'Not available';
          biopsyReport = firstDischarge['Biopsy'] ?? 'Not available';
          otherFindings = firstDischarge['Other_reports'] ?? 'Not available';
        }
      } catch (e) {
        print('Error parsing discharge data: $e');
      }
    }

    // 2. Generate PDF
    final pdf = pw.Document();
    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        margin: const pw.EdgeInsets.all(32),
        header: (context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.stretch,
          children: [
            buildPageNumber(context, font: notoFont),
            buildMainHeading('Discharge Sheet'),
            pw.SizedBox(height: 10),
          ],
        ),
        footer: (context) => pw.Align(
          alignment: pw.Alignment.center,
          child: footer,
        ),
        build: (context) => [
          pw.Center(
            child: pw.Text(
              'DISCHARGE SUMMARY',
              style: pw.TextStyle(
                font: notoFont,
                fontSize: 18,
                fontWeight: pw.FontWeight.bold,
                letterSpacing: 1.5,
              ),
            ),
          ),
          pw.Text('Patient Information',
              style: sectionHeaderStyle.copyWith(font: notoFont)),
          pw.Divider(thickness: 0.8, color: PdfColors.grey300),
          pw.SizedBox(height: 8),
          pw.Table(
            border: pw.TableBorder.all(width: 0.5, color: PdfColors.grey),
            columnWidths: {
              0: pw.FlexColumnWidth(1),
              1: pw.FlexColumnWidth(1),
              2: pw.FlexColumnWidth(1),
              3: pw.FlexColumnWidth(1),
            },
            children: [
              pw.TableRow(
                children: [
                  pw.Padding(
                    padding: const pw.EdgeInsets.all(4),
                    child: pw.Align(
                      alignment: pw.Alignment.center,
                      child: pw.Text('Adm No: ${admissionId ?? 'N/A'}',
                          style: pw.TextStyle(font: notoFont)),
                    ),
                  ),
                  pw.Padding(
                    padding: const pw.EdgeInsets.all(4),
                    child: pw.Align(
                      alignment: pw.Alignment.center,
                      child: pw.Text(
                          'Patient ID: ${userData?['UserID'] ?? 'N/A'}',
                          style: pw.TextStyle(font: notoFont)),
                    ),
                  ),
                  pw.Padding(
                    padding: const pw.EdgeInsets.all(4),
                    child: pw.Align(
                      alignment: pw.Alignment.center,
                      child: pw.Text(
                          'Ward No: ${patientDetails?['Ward_no'] ?? 'N/A'}',
                          style: pw.TextStyle(font: notoFont)),
                    ),
                  ),
                  pw.Padding(
                    padding: const pw.EdgeInsets.all(4),
                    child: pw.Align(
                      alignment: pw.Alignment.center,
                      child: pw.Text('Bed No: ${bedNo ?? 'N/A'}',
                          style: pw.TextStyle(font: notoFont)),
                    ),
                  ),
                ],
              ),
            ],
          ),
          pw.SizedBox(height: 8),
          pw.Row(
            children: [
              pw.Expanded(
                child: pw.Text('Name: ${userData?['Name'] ?? 'N/A'}',
                    style: pw.TextStyle(font: notoFont)),
              ),
              pw.Expanded(
                child: pw.Text(
                    'Age/Gender: ${Age ?? 'N/A'}/${userData?['Gender'] ?? 'N/A'}',
                    style: pw.TextStyle(font: notoFont)),
              ),
            ],
          ),
          pw.SizedBox(height: 6),
          pw.Container(
            width: double.infinity,
            child: pw.Text('Address: ${userData?['Address'] ?? 'N/A'}',
                style: pw.TextStyle(font: notoFont)),
          ),
          pw.SizedBox(height: 6),
          pw.Row(
            children: [
              pw.Expanded(
                child: pw.Text(
                    'Mobile No: ${userData?['Contact_number'] ?? 'N/A'}',
                    style: pw.TextStyle(font: notoFont)),
              ),
              pw.Expanded(
                child: pw.Text('CNIC No: ${userData?['CNIC'] ?? 'N/A'}',
                    style: pw.TextStyle(font: notoFont)),
              ),
            ],
          ),
          pw.SizedBox(height: 6),
          pw.Row(
            children: [
              pw.Expanded(
                child: pw.Text(
                    'Date of Admission: ${patientDetails?['Admission_date'] != null ? formatDate(DateTime.parse(patientDetails!['Admission_date'])):'N/A'}',
                    style: pw.TextStyle(font: notoFont)),
              ),
             pw.Expanded(
  child: pw.Text(
    'Date of Discharge: ${ dischargeData!['data'][0]['Discharge_date']!= null 
        ? formatDate(DateTime.parse(dischargeData!['data'][0]['Discharge_date'])) 
        : 'N/A'}',
    style: pw.TextStyle(font: notoFont),
  ),
),
            ],
          ),
          pw.SizedBox(height: 10),
          pw.Text('History:',
              style: pw.TextStyle(
                  fontWeight: pw.FontWeight.bold,
                  font: notoFont,
                  fontSize: 16)),
          pw.SizedBox(height: 4),
          pw.Container(
            padding: const pw.EdgeInsets.all(8),
            decoration: pw.BoxDecoration(
              border: pw.Border.all(color: PdfColors.grey600),
              borderRadius: pw.BorderRadius.circular(4),
              color: PdfColors.grey100,
            ),
            child: pw.Text(patientDetails?['Receiving_note'] ?? 'Not available',
                style: pw.TextStyle(font: notoFont)),
          ),
          pw.SizedBox(height: 8),
          pw.Text('Investigations',
              style: sectionHeaderStyle.copyWith(font: notoFont)),
          pw.Divider(thickness: 0.8, color: PdfColors.grey300),
          pw.SizedBox(height: 8),
          pw.Text('1. Report Findings:',
              style: pw.TextStyle(
                  fontWeight: pw.FontWeight.bold,
                  font: notoFont,
                  fontSize: 14)),
          pw.SizedBox(height: 4),
          pw.Row(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Text('•  ', style: pw.TextStyle(font: notoFont)),
              pw.Expanded(
                child: pw.Text(
                    'CT Scan: ${dischargeData['data'][0]['CT_scan'] ?? 'N/A'}',
                    style: pw.TextStyle(font: notoFont)),
              ),
            ],
          ),
          pw.Row(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Text('•  ', style: pw.TextStyle(font: notoFont)),
              pw.Expanded(
                child: pw.Text(
                    'MRI: ${dischargeData['data'][0]['MRI'] ?? 'N/A'}',
                    style: pw.TextStyle(font: notoFont)),
              ),
            ],
          ),
          pw.Row(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Text('•  ', style: pw.TextStyle(font: notoFont)),
              pw.Expanded(
                child: pw.Text(
                    'Others: ${dischargeData['data'][0]['Other_reports'] ?? 'N/A'}',
                    style: pw.TextStyle(font: notoFont)),
              ),
            ],
          ),
          pw.SizedBox(height: 6),
          pw.Text('Diagnosis Based on Reports:',
              style:
                  pw.TextStyle(fontWeight: pw.FontWeight.bold, font: notoFont)),
          pw.SizedBox(height: 6),
          pw.Container(
            width: double.infinity,
            padding: const pw.EdgeInsets.all(8),
            decoration: pw.BoxDecoration(
              border: pw.Border.all(color: PdfColors.grey500),
              borderRadius: pw.BorderRadius.circular(4),
            ),
            child: pw.Text(
                patientDetails?['Associate_diagnosis'] ?? 'Not available',
                style: pw.TextStyle(font: notoFont)),
          ),
          pw.SizedBox(height: 20),
          pw.Text('Discharge Treatment',
              style: sectionHeaderStyle.copyWith(font: notoFont)),
          pw.Divider(thickness: 0.8, color: PdfColors.grey300),
          pw.SizedBox(height: 6),


// 1. Condition at the Time of Discharge
pw.Column(
  crossAxisAlignment: pw.CrossAxisAlignment.start,
  children: [
    pw.Text(
      'Condition at the Time of Discharge',
      style: pw.TextStyle(
        fontWeight: pw.FontWeight.bold,
        fontSize: 14,
        font: notoFont,
      ),
    ),
    pw.SizedBox(height: 6),
    pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(10),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey500, width: 0.5),
        borderRadius: pw.BorderRadius.circular(6),
      ),
      child: pw.Text(
        conditionAtDischarge,
        style: pw.TextStyle(
          font: notoFont,
          lineSpacing: 5,
        ),
      ),
    ),
    pw.SizedBox(height: 20),
    
    // 2. Discharge Treatment
    pw.Text(
      ' Treatment',
      style: pw.TextStyle(
        fontWeight: pw.FontWeight.bold,
        fontSize: 14,
        font: notoFont,
      ),
    ),
    pw.SizedBox(height: 6),
    pw.Container(  // Optional: Add container for better visual separation
      padding: const pw.EdgeInsets.symmetric(horizontal: 4),
      child: pw.Text(
        dischargeTreatment,
        style: pw.TextStyle(
          font: notoFont,
          lineSpacing: 6,  // Slightly increased line spacing
          fontSize: 13,    // Slightly reduced font size for better fit
        ),
      ),
    ),
    pw.SizedBox(height: 20),
    
    // 3. Follow-up
    pw.Text(
      'Follow-up',
      style: pw.TextStyle(
        fontWeight: pw.FontWeight.bold,
        fontSize: 14,
        font: notoFont,
      ),
    ),
    pw.SizedBox(height: 6),
    pw.Container(
      padding: const pw.EdgeInsets.symmetric(horizontal: 4),
      child: pw.Text(
        followUp,
        style: pw.TextStyle(
          font: notoFont,
          lineSpacing: 6,
          fontSize: 13,
        ),
      ),
    ),
    pw.SizedBox(height: 20),
    
    // 4. Instructions
    pw.Text(
      'Instructions',
      style: pw.TextStyle(
        fontWeight: pw.FontWeight.bold,
        fontSize: 15,  // Slightly larger than other headings
        font: notoFont,
        decoration: pw.TextDecoration.underline,  // Optional underline
      ),
    ),
    pw.SizedBox(height: 8),  // More space before content
    pw.Container(
      padding: const pw.EdgeInsets.symmetric(horizontal: 4),
      child: pw.Text(
        instructions,
        style: pw.TextStyle(
          font: notoFont,
          lineSpacing: 6,
          fontSize: 13,
        ),
      ),
    ),
    pw.SizedBox(height: 30),  // Extra space before signature section
    
    // Final Row: Dr Name, Signature, Discharge Date & Time
    pw.Row(
      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
      crossAxisAlignment: pw.CrossAxisAlignment.end,
      children: [
        pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text(
              'Discharged By:',
              style: pw.TextStyle(
                font: notoFont,
                fontSize: 12,
                color: PdfColors.grey700,
              ),
            ),
            pw.Text(
              'Dr. $doctor',
              style: pw.TextStyle(
                font: notoFont,
                fontWeight: pw.FontWeight.bold,
              ),
            ),
          ],
        ),
        
        pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.end,
          children: [
        
            pw.SizedBox(height: 10),
            pw.Text(
              'Signature: __________________',
              style: pw.TextStyle(
                font: notoFont,
                fontSize: 12,
              ),
            ),
          ],
        ),
      ],
    ),
  ],
),
    ]));

    try {
      // 3. Get path from your helper
      final downloadPath = await getMedoSubFolderPath("Discharge Summary");
      if (downloadPath == null) throw Exception('Download path unavailable.');

      final directory = Directory(downloadPath);
      if (!await directory.exists()) {
        await directory.create(recursive: true);
      }

      // 4. Save PDF to file
      final file = File('$downloadPath/Discharge Summary A-$admissionId.pdf');
      await file.writeAsBytes(await pdf.save());

      // 5. On success: clear field & show recent PDFs
      setState(() {
        admissionIdController.clear();
        isViewingPatientDetails = false;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            'PDF saved to ${file.path}',
            style: TextStyle(color: Colors.black),
          ),
          backgroundColor: Colors.blueGrey[200],
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            'Failed to save PDF: $e',
            style: TextStyle(color: Colors.black),
          ),
          backgroundColor: Colors.red.withOpacity(0.7),
        ),
      );
    }
  }

  void handleSummaryStatus(bool status) {
    setState(() {
      isCompleteSummary = status;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.white,
        automaticallyImplyLeading: false,
        title: Text(
          'Generate Discharge Card',
          style: GoogleFonts.roboto(
            color: const Color.fromARGB(255, 122, 121, 121),
          ),
        ),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            // 🔥 Search bar
            Center(
              child: ConstrainedBox(
                constraints: BoxConstraints(maxWidth: 600),
                child: TextField(
                  controller: admissionIdController,
                  focusNode: IDFocusNode,
                  decoration: InputDecoration(
                    labelText: "Enter Patient Admission No",
                    labelStyle: GoogleFonts.roboto(
                      color: IDFocusNode.hasFocus
                          ? const Color.fromARGB(255, 122, 121, 121)
                          : Colors.grey,
                    ),
                    border: const OutlineInputBorder(),
                    focusedBorder: OutlineInputBorder(
                      borderSide: BorderSide(
                        color: isAdmissionIdInvalid
                            ? Colors.red
                            : Colors.blue.shade900,
                        width: 2,
                      ),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderSide: BorderSide(
                        color: isAdmissionIdInvalid
                            ? Colors.red
                            : const Color.fromARGB(255, 122, 121, 121),
                        width: 1,
                      ),
                    ),
                    suffixIcon: Tooltip(
                      message: "Fetch Details",
                      child: IconButton(
                        icon: const Icon(Icons.search),
                        onPressed: () {
                          validateAndFetchPatientData();
                        },
                      ),
                    ),
                    errorText: isAdmissionIdInvalid ? errorMessage : null,
                    errorStyle: GoogleFonts.roboto(color: Colors.red),
                  ),
                  cursorColor: const Color.fromARGB(255, 122, 121, 121),
                  onSubmitted: (value) {
                    validateAndFetchPatientData(); //search on pressing enter
                  },
                ),
              ),
            ),
            const SizedBox(height: 20),

            // 🔥 Show Back Button only if viewing patient details or search results
            if (isViewingPatientDetails)
              Align(
                alignment: Alignment.topLeft,
                child: Row(
                  mainAxisAlignment: MainAxisAlignment
                      .spaceBetween, // Align elements on both ends
                  children: [
                    // Back Button on the left
                    TextButton.icon(
                      onPressed: () {
                        setState(() {
                          isViewingPatientDetails = false;
                          hasSearched = false;
                          isAdmissionIdInvalid = false;
                          admissionIdController.clear();
                        });
                      },
                      icon: const Icon(Icons.arrow_back,
                          color: Color.fromARGB(255, 122, 121, 121)),
                      label: Text(
                        "Back to PDFs",
                        style: GoogleFonts.roboto(
                          color: const Color.fromARGB(255, 122, 121, 121),
                          fontSize: 16,
                        ),
                      ),
                    ),

                    // Download PDF Button on the right
                    // Conditional visibility for the Download PDF Button
                    Visibility(
                      visible:
                          isCompleteSummary, // Show the button only if the summary is complete
                      child: TextButton.icon(
                        onPressed: () {
                          if (patientDetails?['Disposal_status'] != null &&
                              (!isUploaded || !isDischarge)) {
                            _handleDischarge();
                          } else if (patientDetails?['Disposal_status'] ==
                              null) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content:
                                    Text('Please set disposal status first'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                          } else {
                            _generatePdf();
                          }
                        },
                    

                        icon: Icon(
                          isUploaded
                              ? Icons.download
                              : Icons.check_circle_outline,
                          color: const Color.fromARGB(255, 122, 121, 121),
                        ),
                        label: Text(
                          isUploaded ? "Generate PDF" : "Discharge",
                          style: GoogleFonts.roboto(
                            color: const Color.fromARGB(255, 122, 121, 121),
                            fontSize: 16,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),

            const Divider(thickness: 1.5),

            // 🔥 Main Area
            Expanded(
              child: Builder(
                builder: (context) {
                  if (dischargeCardsDirectoryPath == null) {
                    return Center(
                      child: CircularProgressIndicator(
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.grey),
                      ),
                    );
                  }

                  if (isLoading) {
                    return Center(
                      child: CircularProgressIndicator(
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.grey),
                      ),
                    );
                  }

// ✅ 1. If user is viewing details AND patient is found
                  if (isViewingPatientDetails && patientFound && data != null) {
                    return SingleChildScrollView(
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          DischargeWidget(data: data!), // ✅ Existing content

                          const SizedBox(height: 24),

                          if (isCompleteSummary &&
                              patientDetails!['Disposal_status'] == null) ...[
                            const Text(
                              "Select Disposal Status:",
                              style: TextStyle(
                                  fontSize: 16, fontWeight: FontWeight.bold),
                            ),
                            const SizedBox(height: 8),
                            DropdownButtonFormField<String>(
                              decoration: InputDecoration(
                                border: const OutlineInputBorder(),
                                contentPadding: const EdgeInsets.symmetric(
                                    horizontal: 12, vertical: 10),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: BorderSide(
                                    color: Color(0xFF103783),
                                    // Set the border color when focused
                                    width: 2,
                                  ),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: BorderSide(
                                    color: Color(0xFF103783),
                                    // Set the border color when enabled
                                    width: 1,
                                  ),
                                ),
                              ),
                              value: selectedDisposalStatus,
                              hint: const Text("Choose status"),
                              items: const [
                                DropdownMenuItem(
                                    value: "Discharged",
                                    child: Text("Discharged")),
                                DropdownMenuItem(
                                    value: "Died", child: Text("Died")),
                                DropdownMenuItem(
                                    value: "Left against advice",
                                    child: Text("Left against advice")),
                              ],
                              onChanged: (value) {
                                setState(() {
                                  selectedDisposalStatus = value;
                                });
                              },
                            ),
                            const SizedBox(height: 16),
                            Center(
                              child: SizedBox(
                                height: 36,
                                child: ElevatedButton(
                                  onPressed: () async {
                                    if (selectedDisposalStatus != null) {
                                      // Update the disposal status
                                      final success = await UsersServices
                                          .updateDisposalStatus(admissionId,
                                              selectedDisposalStatus!);

                                      if (success) {
                                        // Show success message
                                        ScaffoldMessenger.of(context)
                                            .showSnackBar(
                                          SnackBar(
                                              content: Text(
                                                "Disposal status updated successfully.",
                                                style: TextStyle(
                                                    color: Colors
                                                        .black), // Set the text color to black
                                              ),
                                              backgroundColor:
                                                  Colors.blueGrey[200]),
                                        );

                                        // Fetch the updated patient data after the status update
                                        await fetchPatientData();
                                      } else {
                                        // Show failure message
                                        ScaffoldMessenger.of(context)
                                            .showSnackBar(
                                          SnackBar(
                                              content: Text(
                                                  "Failed to update disposal status.",
                                                  style: TextStyle(
                                                      color: Colors.black)),
                                              backgroundColor:
                                                  Colors.blueGrey[200]),
                                        );
                                      }
                                    } else {
                                      print(
                                          "Please select a disposal status first.");
                                    }
                                  },
                                  style: ElevatedButton.styleFrom(
                                    padding: const EdgeInsets.symmetric(
                                        horizontal: 24),
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(6),
                                    ),
                                    backgroundColor:
                                        const Color(0xFF103783), // Button color
                                    foregroundColor: Colors.white, // Text color
                                  ),
                                  child: const Text("Set Status"),
                                ),
                              ),
                            ),
                          ],
                        ],
                      ),
                    );
                  }

// ✅ 2. If search completed and patient was not found (but input was valid)
                  if (hasSearched &&
                      !isLoading &&
                      !patientFound &&
                      !isAdmissionIdInvalid) {
                    return Center(
                      child: Text(
                        "No Patient Found with Admission No: ${admissionIdController.text}",
                        style: const TextStyle(
                          fontSize: 18,
                          color: Color(0xFF103783),
                        ),
                        textAlign: TextAlign.center,
                      ),
                    );
                  }

// ✅ 3. If admission input was invalid, show nothing (just keep the form on top visible)
                  if (isAdmissionIdInvalid) {
                    return const SizedBox.shrink();
                  }

// ✅ 4. Default case (before any search)
                  if (!isViewingPatientDetails) {
                    return RecentPdfWidget(
                      recentPdfs: [],
                      pdfDirectoryPath: dischargeCardsDirectoryPath!,
                    );
                  }

// Final fallback
                  return const SizedBox.shrink();
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
